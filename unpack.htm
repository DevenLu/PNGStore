
<table border="1"><tbody id="results"></tbody></table>

<p><a href="#" onclick="run_all(); return false;">Run All</a></p>

<script src="md5.js"></script>
<script>

//
// General unpacking functions.
//
// png_to_string() is the wrapper - it takes a src image,
// loads it and then calls the unpacker function with an
// array of the pixels in the image (an ImageData object)
// really. The unpacker function then turns this into a
// string which gets passed to the callback.
//

function png_to_string(src, unpacker, decoder, callback){
	var o = new Image();
	o.onload = function() {
		var c = document.createElement("canvas");
		var t = c.getContext("2d");
		var w = o.width;
		var h = o.height;
		c.width = w;
		c.style.width = w;
		c.height = h;
		c.style.height = h;
		//t.globalAlpha = 1.0;
		//t.globalCompositeOperation = 'copy';
		t.drawImage(o, 0, 0);
		var b = t.getImageData( 0, 0, w, h ).data;
		callback(decoder(unpacker(b)));
	}
	o.onerror = function(){
		callback('ERROR');
	}
	o.src = src+'?'+(new Date().getTime());
}

//
// unpackers take image pixels and turn them into an array of bytes.
// those bytes will get passed to a decoder to turn them into a string.
//

function unpack_1b(b){

	var s = [];
	for (var i=0; i<b.length; i += 32){

		var b1 = b[i];
		var b2 = b[i+4];
		var b3 = b[i+8];
		var b4 = b[i+12];
		var b5 = b[i+16];
		var b6 = b[i+20];
		var b7 = b[i+24];
		var b8 = b[i+28];
		var c = b1 | (b2 << 1) | (b3 << 2) | (b4 << 3) | (b5 << 4) | (b6 << 5) | (b7 << 6) | (b8 << 7);

		if( c > 0 ) s.push(c);
	}
	return s;
}

function unpack_2b(b){

	var s = [];
	for (var i=0; i<b.length; i += 16){

		var b1 = b[i];
		var b2 = b[i+4];
		var b3 = b[i+8];
		var b4 = b[i+12];
		var c = b1 | (b2 << 2) | (b3 << 4) | (b4 << 6);

		if( c > 0 ) s.push(c);
	}
	return s;
}

function unpack_4b(b){

	var s = [];
	for (var i=0; i<b.length; i += 8){

		var b1 = b[i];
		var b2 = b[i+4];
		var c = b1 | (b2 << 4);;

		if( c > 0 ) s.push(c);
	}
	return s;
}


function unpack_1b_gs(b){

	var s = [];
	for (var i=0; i<b.length; i += 32){

		var b1 = b[i];
		var b2 = b[i+4];
		var b3 = b[i+8];
		var b4 = b[i+12];
		var b5 = b[i+16];
		var b6 = b[i+20];
		var b7 = b[i+24];
		var b8 = b[i+28];
		var c = (b1 & 0x01) | (b2 & 0x02) | (b3 & 0x04) | (b4 & 0x08)
		      | (b5 & 0x10) | (b6 & 0x20) | (b7 & 0x40) | (b8 & 0x80);

		if( c > 0 ) s.push(c);
	}
	return s;
}

function unpack_2b_gs(b){

	var s = [];
	for (var i=0; i<b.length; i += 16){

		var b1 = b[i];
		var b2 = b[i+4];
		var b3 = b[i+8];
		var b4 = b[i+12];
		var c = (b1 & 0x03) | (b2 & 0x0C) | (b3 & 0x30) | (b4 & 0xC0);

		if (c > 0) s.push(c);
	}
	return s;
}

function unpack_4b_gs(b){

	var s = [];
	for (var i=0; i<b.length; i += 8){

		var b1 = b[i];
		var b2 = b[i+4];
		var c = (b1 & 0x0F) | (b2 & 0xF0);

		if( c > 0 ) s.push(c);
	}
	return s;
}



function unpack_r(b){

	var s = [];
	for (var i=0; i<b.length; i += 4){
		if( b[i] > 0 ) s.push(b[i]);
	}
	return s;
}

function unpack_rgb(b){

	var s = [];
	for (var i=0; i < b.length; i+=4){
		if (b[i+0] > 0) s.push(b[i+0]);
		if (b[i+1] > 0) s.push(b[i+1]);
		if (b[i+2] > 0) s.push(b[i+2]);
	}
	return s;
}

function unpack_ra(b){

	var s = [];
	for (var i=0; i < b.length; i+=4){
		if (b[i+0] > 0) s.push(b[i+0]);
		if (b[i+3] > 0) s.push(b[i+3]);
	}
	return s;
}

function unpack_rgba(b){

	//console.log(b.slice(0,8));

	var s = [];
	for (var i= 0; i<b.length; i+=4){
		if( b[i] > 0 ) s.push(b[i]);
		if( b[i+1] > 0 ) s.push(b[i+1]);
		if( b[i+2] > 0 ) s.push(b[i+2]);
		if( b[i+3] > 0 ) s.push(b[i+3]);
	}
	return s;
}

function decode_ascii(b){

	var s = "";
	for (var i=0; i<b.length; i++){
		if (b[i]) s += String.fromCharCode(b[i]);
	}

	return s;
}

function decode_seq8(b){

	var s = "";
	var num = Math.ceil(b.length / 7);

	for (var i=0; i<num; i++){

		var b1 = b[(i*7)+0];
		var b2 = b[(i*7)+1];
		var b3 = b[(i*7)+2];
		var b4 = b[(i*7)+3];
		var b5 = b[(i*7)+4];
		var b6 = b[(i*7)+5];
		var b7 = b[(i*7)+6];

		var c1 = (b1 >>> 1);
		var c2 = ((b1 << 6) & 0x7f) | (b2 >>> 2);
		var c3 = ((b2 << 5) & 0x7f) | (b3 >>> 3);
		var c4 = ((b3 << 4) & 0x7f) | (b4 >>> 4);
		var c5 = ((b4 << 3) & 0x7f) | (b5 >>> 5);
		var c6 = ((b5 << 2) & 0x7f) | (b6 >>> 6);
		var c7 = ((b6 << 1) & 0x7f) | (b7 >>> 7);
		var c8 = (b7 & 0x7f);

		if (c1 > 0) s += String.fromCharCode(c1);
		if (c2 > 0) s += String.fromCharCode(c2);
		if (c3 > 0) s += String.fromCharCode(c3);
		if (c4 > 0) s += String.fromCharCode(c4);
		if (c5 > 0) s += String.fromCharCode(c5);
		if (c6 > 0) s += String.fromCharCode(c6);
		if (c7 > 0) s += String.fromCharCode(c7);
		if (c8 > 0) s += String.fromCharCode(c8);
	}

	return s;
}


//
// test multiple images...
//

var base_image_formats = {
	'jquery_ascii_t0_1b_square.png'	: [unpack_1b_gs, decode_ascii],	// works!
	'jquery_ascii_t0_2b_square.png'	: [unpack_2b_gs, decode_ascii],	// works!
	'jquery_ascii_t0_4b_square.png'	: [unpack_4b_gs, decode_ascii],	// works!
	'jquery_ascii_t0_8b_square.png'	: [unpack_r, decode_ascii],	// works!

	'jquery_ascii_t2_8b_square.png' : [unpack_rgb, decode_ascii],	// works!

	'jquery_ascii_t3_1b_square.png'	: [unpack_1b, decode_ascii],	// is 8b
	'jquery_ascii_t3_2b_square.png'	: [unpack_2b, decode_ascii],	// is 8b
	'jquery_ascii_t3_4b_square.png'	: [unpack_4b, decode_ascii],	// is 8b
	'jquery_ascii_t3_8b_square.png'	: [unpack_r, decode_ascii],	// works!

	'jquery_ascii_t4_8b_square.png'	: [unpack_ra, decode_ascii],	// broken - alpha is a bit off

	'jquery_ascii_t6_8b_square.png'	: [unpack_rgba, decode_ascii],	// broken - everything comes back a bit off

	//////////////////////////////////////////////

	'jquery_seq8_t0_1b_square.png' : [unpack_1b_gs, decode_seq8],
	'jquery_seq8_t0_2b_square.png' : [unpack_2b_gs, decode_seq8],
	'jquery_seq8_t0_4b_square.png' : [unpack_4b_gs, decode_seq8],
	'jquery_seq8_t0_8b_square.png' : [unpack_r, decode_seq8],

	'jquery_seq8_t2_8b_square.png' : [unpack_rgb, decode_seq8],

	'jquery_seq8_t3_1b_square.png' : [unpack_1b, decode_seq8],
	'jquery_seq8_t3_2b_square.png' : [unpack_2b, decode_seq8],
	'jquery_seq8_t3_4b_square.png' : [unpack_4b, decode_seq8],
	'jquery_seq8_t3_8b_square.png' : [unpack_r, decode_seq8],

	'jquery_seq8_t4_8b_square.png' : [unpack_ra, decode_seq8],

	'jquery_seq8_t6_8b_square.png' : [unpack_rgba, decode_seq8],
};

var folders = [
	'perl_images/',
	'perl_images_pngcrush/',
	'perl_images_optipng/',
	'perl_images_pngout/'
];

var image_formats = {};
for (var i=0; i<folders.length; i++){
	for (var j in base_image_formats){
		image_formats[folders[i]+j] = base_image_formats[j];

		var key2 = j.replace(/square/, 'tall');
		image_formats[folders[i]+key2] = base_image_formats[j];

		var key3 = j.replace(/square/, 'wide');
		image_formats[folders[i]+key3] = base_image_formats[j];
	}
}


var elm_map = {};
var start_snip = 16;
var end_snip = 5;
var gi = 1;

function test(){

	var html = "";

	for (var id in image_formats){

		var uid = "cell"+(gi++);
		elm_map[id] = uid;

		html += "<tr>";
		html += "<td id=\""+uid+"_a\"><a href=\"#\" onclick=\"run_test('"+id+"'); return false\">"+id+"</a></td>";
		html += "<td id=\""+uid+"_b\">-</td>";
		html += "<td id=\""+uid+"_c\">-</td>";
		html += "<td id=\""+uid+"_d\">-</td>";
		html += "<td id=\""+uid+"_e\">-</td>";
		html += "</tr>";
	}
	document.getElementById('results').innerHTML = html;
}

function run_test(id){

	var a = image_formats[id];

	png_to_string(id, a[0], a[1], function(){
		var x = id;	
		return function(s){
			var z = x;
			document.getElementById(elm_map[z]+'_a').innerHTML = z;
			document.getElementById(elm_map[z]+'_b').innerHTML = hex_md5(s);
			document.getElementById(elm_map[z]+'_c').innerHTML = s.substr(0, start_snip);
			document.getElementById(elm_map[z]+'_d').innerHTML = s.substr(s.length-(end_snip+1), end_snip);
			document.getElementById(elm_map[z]+'_e').innerHTML = s.length;
		}
	}());
}

function run_all(){
	for (var i in image_formats){
		run_test(i);
	}
}

test();

</script>
